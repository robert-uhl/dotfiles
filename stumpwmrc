;; -*-lisp-*-
;debian=sbcl
(in-package :stumpwm-user)



(require :asdf)

;;; If a fasl was stale, try to recompile and load (once).
(defmethod asdf:perform :around ((o asdf:load-op)
                                 (c asdf:cl-source-file))
  (handler-case (call-next-method o c)
    (sb-ext:invalid-fasl ()
      (asdf:perform (make-instance 'asdf:compile-op) c)
      (call-next-method))))

(ql:quickload '(:clx-truetype
                :ttf-fonts
                :split-sequence
                :bordeaux-threads
                :dbus
                "local-time"))

(push #P"/home/buhl/.local/share/fonts/" xft:*font-dirs*)
(set-font (make-instance 'xft:font :family "Source Code Pro Semibold" :subfamily "Regular" :size 12))

(ql:quickload :swank)

(let ((server-running nil))
  (defcommand swank () ()
    "Toggle the swank server on/off"
    (if server-running
        (progn
          (swank:stop-server 4005)
          (echo-string
           (current-screen)
           "Stopping swank.")
          (setf server-running nil))
        (progn
          (swank:create-server :port 4005
                               :style swank:*communication-style*
                               :dont-close t)
          (echo-string
           (current-screen)
           "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm).")
          (setf server-running t))))

  (defcommand quit-swank () ()
    (when server-running
      (swank:stop-server 4005)
      (setf server-running nil)))

  (add-hook *quit-hook* (lambda () (when server-running (swank:stop-server 4005))))
  (add-hook stumpwm::*restart-hook* (lambda () (when server-running (swank:stop-server 4005)))))

(handler-case (swank)
  ;; Don't crash StumpWM if it's restarted with the swank socket open
  ;; (even though this itself is a bad thing).
  (sb-bsd-sockets:address-in-use-error () (continue)))

;; This is the beginning of using Super to manipulate StumpWM rather than C-1
(define-key *top-map* (kbd "s-w") "windows")
(define-key *top-map* (kbd "s-!") "exec")
(define-key *top-map* (kbd "s-x") "colon")
(define-key *top-map* (kbd "s-Left") "move-focus left")
(define-key *top-map* (kbd "s-Right") "move-focus right")
(define-key *top-map* (kbd "s-Up") "move-focus up")
(define-key *top-map* (kbd "s-Down") "move-focus down")
(define-key *top-map* (kbd "s-o") "fother")
(define-key *top-map* (kbd "s-O") "other-in-frame")

;; This is so much better than C-t, but it's not ideal.  More stuff
;; needs to hang off of Super.
(set-prefix-key (kbd "C-1"))

(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy

(defcommand chrome () ()
  "run chromium"
  (run-or-raise "google-chrome" '(:class "Google-chrome")))

(defparameter *group-to-firefox-profile-alist* nil)

(defparameter *default-firefox-profile* "Default")

(defcommand firefox (&optional url) ((:string))
  "run firefox"
  (let ((profile (or (cdr (assoc (group-name (current-group)) *group-to-firefox-profile-alist* :test #'string=))
                     *default-firefox-profile*)))
    (run-or-raise (format nil "firefox -new-instance -P \"~a\" --class \"Firefox-~a\"" profile profile)
                  `(:class ,(format nil "Firefox-~a" profile)))
    (when url
      (run-shell-command (format nil "firefox -new-tab ~a" (puri:parse-uri url))))))

(define-key *top-map* (kbd "C-M-6") "firefox")

;;; conkeror was awesome, but it's just too flaky☹
;; (defcommand conkeror () ()
;;   "run conkeror"
;;   (run-or-raise "conkeror" '(:class "Conkeror")))

;; (define-key *top-map* (kbd "C-M-8") "conkeror")

(defcommand virtualbox () ()
  "switch to VirtualBox"
  (run-or-raise "VirtualBox --startvm \"Windows\"" '(:class "VirtualBox")))

(define-key *top-map* (kbd "C-M-4") "virtualbox")

;;; I don't use Pidgin anymore.

;; (defcommand pidgin-chat-window () ()
;;   "Raise pidgin-chat-window"
;;   (run-or-raise "pidgin" '(:class "Pidgin" :role "conversation")))

;; ;; (define-key *top-map* (kbd "C-M-2") "pidgin-chat-window")

;; (defcommand pidgin () ()
;;   "Run pidgin"
;;   (run-or-raise "pidgin" '(:class "Pidgin" :role "buddy_list")))

(defcommand start-emacs () ()
  "start emacs dæmon"
  (run-shell-command "emacs --daemon"))

(defcommand stop-emacs () ()
  "stop emacs dæmon"
  (run-shell-command "emacsclient -e '(save-buffers-kill-emacs)'"))

;; emacs should always be running: M-x all-hail emacs
(start-emacs)

(add-hook *quit-hook* #'stop-emacs)

;;; TODO: it'd be awesome if this could be unified with the
;;; group-based Firefox stuff above.
(defparameter *group-to-emacs-frame-alist* nil)

(defparameter *default-emacs-frame* "emacs")

(defcommand emacs () ()
  "run emacs"
  (let ((frame (or (cdr (assoc (group-name (current-group)) *group-to-emacs-frame-alist* :test #'string=))
                     *default-emacs-frame*)))
    ;; FIXME: this will break if the emacs frame name contains a single quote.
    (run-or-raise (format nil "/usr/local/bin/emacsclient -c -F '((name . \"~a\"))' -a ''" frame)
                  `(:instance ,frame))))

(defcommand conkeror () ()
  "run conkeror"
  (run-or-raise "/usr/local/bin/conkeror" '(:class "Conkeror")))

#|
;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t)) " | %t | %c| %l | [^B%n^b] %W"))

(define-key *top-map* (kbd "M-4") "emacs")
(define-key *top-map* (kbd "M-F9") "loadrc")
(define-key *top-map* (kbd "Pause") "gother")
(define-key *top-map* (kbd "C-Pause") "grouplist")

;; Some keybindings for the defined prefix key:
(define-key *root-map* (kbd "DEL") "repack-window-numbers")
(define-key *root-map* (kbd "I") "show-window-properties")

|#

(clear-window-placement-rules)
;;(gnew-float "GIMP")

;;(define-frame-preference "GIMP"
  ;;(1 t t :create "gimp-dump" :class "Gimp" :title nil :role nil)
  ;;(0 t t :create "gimp-dump" :class "Gimp" :title nil :role "gimp-toolbox")
  ;;(2 t t :create "gimp-dump" :class "Gimp" :title nil :role "gimp-dock")
  ;;(1 t t :create "gimp-dump" :class "Gimp" :title nil :role "gimp-image-window"))

;; (gnew "Terminal")
;; (gnew "Development")
;; (gnew "Web")

;; (define-frame-preference "Terminal"
;;     (0 t t :class "Gnome-terminal"))

;; (define-frame-preference "Development"
;;     (1 t t :class "Emacs23")
;;     (0 t t :class "Eclipse"))

;; (define-frame-preference "Web"
;;     (0 t t :class "Chromium-browser"))

;; (defcommand urxvt () ()
;;   "Start an urxvt instance or switch to it, if it is already running."
;;   (run-or-raise "urxvt" '(:instance "urxvt")))
;; (define-key *root-map* (kbd "c") "urxvt")
;; (defcommand gnome-terminal () ()
;;   "Start an gnome-terminal instance or switch to it, if it is already running."
;;   (run-or-raise "gnome-terminal" '(:instance "gnome-terminal")))
;; (define-key *root-map* (kbd "c") "gnome-terminal")

;;; TODO: it'd be _really_ awesome were this unified with the
;;; group-based Firefox & emacs stuff above.  I don't know if the
;;; StumpWM placement preferences are able to handle this sort of
;;; thing.  _Maybe_ it can support the st rule?
(defparameter *group-to-st-instance-alist* nil)

(defparameter *default-st-instance* "Default")

(defcommand stterm () ()
  "Start an stterm or switch to it, if it is already running."
  (let ((instance (or (cdr (assoc (group-name (current-group)) *group-to-st-instance-alist* :test #'string=))
                      *default-st-instance*)))
    (run-or-raise (format nil "st -n \"~a\" -e tmux new-session -A -s \"~a\"" instance instance)
                  `(:instance ,instance ))))

(define-key *root-map* (kbd "c") "stterm")

(defcommand suspend-dunst ()()
  "Suspend dunst notifications"
  (run-shell-command "killall -SIGUSR1 dunst"))

(defcommand resume-dunst ()()
  "Resume dunst notifications"
  (run-shell-command "killall -SIGUSR2 dunst"))

(defcommand lock-screen () ()
  (run-shell-command "xautolock -locknow"))

(defcommand unlock-screen () ()
  (run-shell-command "xautolock -unlocknow"))

(define-key *top-map* (kbd "s-l") "lock-screen")

(defvar *screen-map* (make-sparse-keymap))

(define-key *root-map* (kbd "/") '*screen-map*)

(defcommand home-display-layout () ()
  "Switch to my home display setup (portrait + laptop)"
  (run-shell-command (namestring (uiop:merge-pathnames* ".screenlayout/home.sh" (user-homedir-pathname)))))

(defcommand office-display-layout () ()
  "Switch to my office display setup (portrait + landscape)"
  (run-shell-command (namestring (uiop:merge-pathnames* ".screenlayout/office.sh" (user-homedir-pathname)))))

(defcommand standalone-display-layout () ()
  "Switch to laptop-only display"
  (run-shell-command (namestring (uiop:merge-pathnames* ".screenlayout/standalone.sh" (user-homedir-pathname)))))

(standalone-display-layout)

(defcommand conference-room-display-layout () ()
  "Switch to conference-room display"
  (run-shell-command (namestring (uiop:merge-pathnames* ".screenlayout/conference-room.sh" (user-homedir-pathname)))))

(define-key *screen-map* (kbd "h") "home-display-layout")
(define-key *screen-map* (kbd "o") "office-display-layout")
(define-key *screen-map* (kbd "s") "standalone-display-layout")
(define-key *screen-map* (kbd "c") "conference-room-display-layout")

(defvar *super-map* (make-sparse-keymap))
(define-key *top-map* (kbd "C-M-s-X") '*super-map*)
(define-key *top-map* (kbd "s-x") '*super-map*)
(define-key *super-map* (kbd "0") "remove")
(define-key *super-map* (kbd "1") "only")
(define-key *super-map* (kbd "2") "vsplit")
(define-key *super-map* (kbd "3") "hsplit")
(define-key *super-map* (kbd "o") "fnext")

(define-key *top-map* (kbd "C-s-Left") "move-window left")
(define-key *top-map* (kbd "C-M-s-S-Left") "move-window left")
(define-key *top-map* (kbd "C-s-Right") "move-window right")
(define-key *top-map* (kbd "C-M-s-S-Right") "move-window right")
(define-key *top-map* (kbd "C-s-Up") "move-window up")
(define-key *top-map* (kbd "C-M-s-S-Up") "move-window up")
(define-key *top-map* (kbd "C-s-Down") "move-window down")
(define-key *top-map* (kbd "C-M-s-S-Down") "move-window down")

(define-key *top-map* (kbd "s-e") "move-focus up")
(define-key *top-map* (kbd "C-s-e") "move-window up")
(define-key *top-map* (kbd "s-d") "move-focus down")
(define-key *top-map* (kbd "C-s-d") "move-window down")
(define-key *top-map* (kbd "s-s") "move-focus left")
(define-key *top-map* (kbd "C-s-s") "move-window left")
(define-key *top-map* (kbd "s-f") "move-focus right")
(define-key *top-map* (kbd "C-s-f") "move-window right")

(define-key *top-map* (kbd "s-c") "stterm")
(define-key *top-map* (kbd "s-e") "emacs")
(define-key *top-map* (kbd "s-w") "firefox")
(define-key *top-map* (kbd "C-s-w") "chrome")

(defvar %run-once% nil)

;; consider running dbus-launch and setting vars…

(unless %run-once%
  (run-shell-command "xsettingsd")
  (run-shell-command "redshift -l 38.810589:-77.144605")
  (run-shell-command "exec xautolock -locker \"zsh -c 'xset dpms 900 1200 1800 & (slock && xset -dpms)' \" -corners 0-00 -time 5")
  ;; FIXME: can CLX handle this xset bit?
  ;;(run-shell-command "xset +dpms dpms 300 600 900")
  (run-shell-command "nm-applet --sm-disable")
  (run-shell-command "xbacklight -set 76")
  (run-shell-command "ibus-daemon --xim -d")
  ;;(run-shell-command "xscreensaver")
  (setf %run-once% t))

(run-shell-command "synclient VertScrollDelta=-53")
(run-shell-command "feh --bg-tile ~/Pictures/geomatrix-nord.png")

;; dbus-send --system --print-reply     --dest="org.freedesktop.UPower"     /org/freedesktop/UPower     org.freedesktop.UPower.Suspend

;; ;; the mode-line is kinda nice
;; (setf *screen-mode-line-format* "%d [^B%n^b] %W"
;;       *time-modeline-string* "%d %b %y %H:%M"
;;       *mode-line-timeout* 15)

;; ;; let's enable it everywhere
;; (defun enable-all-mode-lines ()
;;   (loop for screen in *screen-list*
;;         do (loop for head in (screen-heads screen)
;;                  do (enable-mode-line screen head t))))

;; (defun toggle-all-mode-lines ()
;;   (loop for screen in *screen-list*
;;         do (loop for head in (screen-heads screen)
;;                  do (toggle-mode-line screen head t))))

;; ;; (toggle-all-mode-lines)
;; (enable-all-mode-lines)

;; (defvar !old-group-sync-all-heads!
;;   (first (remove-if-not
;;           #'(lambda (x) (and (equalp (sb-mop:method-qualifiers x) '(:after))
;;                              (equalp (sb-mop:method-specializers x) (list (find-class 'group)))))
;;           (sb-mop:generic-function-methods #'group-sync-all-heads))))

;; update mode lines when the screen heads change

;; (defmethod group-sync-all-heads :after ((group group))
;;   (when !old-group-sync-all-heads!
;;     (funcall !old-group-sync-all-heads! group))
;;   (enable-all-mode-lines))

;; switch to other user: dbus-send --system --print-reply --dest=org.gnome.DisplayManager /org/gnome/DisplayManager/LocalDisplayFactory "org.gnome.DisplayManager.LocalDisplayFactory.CreateTransientDisplay"

(loop for file in (uiop:directory* (uiop:merge-pathnames* "*.lisp" (uiop:xdg-config-home "stumpwm/")))
      do (load file))

(set-fg-color "#D8DEE9")
(set-bg-color "#2e3440")
(setf *colors*
      '("#2e3440" "#bf616a" "#a3be8c" "#ebcb8b" "#81a1c1" "#b48ead" "#8fbcbb" "#d8dee9"))
(mapcar #'update-color-map *screen-list*)

(defvar *plumbing* nil "List of (FILTER . FUNCTION) pairs.  FILTER should return true if FUNCTION may be called on its single argument.  FUNCTION takes a single argument.")

(defun rau/get-x-selection (&optional timeout (selection stumpwm::*default-selections*))
  "Get the X selection and also information about it.

Taken from STUMPWM:GET-X-SELECTION."
  (let ((selection (if (listp selection) (car selection) selection)))
    (labels ((wait-for-selection (&rest event-slots &key display event-key &allow-other-keys)
               (declare (ignore display))
               (when (eq event-key :selection-notify)
                 (destructuring-bind (&key window property &allow-other-keys) event-slots
                   (if property
                       (stumpwm::utf8-to-string (xlib:get-property window property :type :utf8_string :result-type 'vector :delete-p t))
                       "")))))
      (or (getf *x-selection* selection)
          (progn
            (xlib:convert-selection selection :utf8_string (stumpwm::screen-input-window (current-screen)) :stumpwm-selection)
            ;; Note: this may spend longer than timeout in this loop but it will eventually return.
            (let ((time (get-internal-real-time)))
              (loop for ret = (xlib:process-event *display* :handler #'wait-for-selection :timeout timeout :discard-p nil)
                    when (or ret
                             (> (/ (- time (get-internal-real-time)) internal-time-units-per-second)
                                timeout))
                      ;; make sure we return a string
                      return (or ret ""))))))))

;; (load-module "swm-gaps")
;; (setq swm-gaps:*inner-gaps-size* 6
;;       swm-gaps:*outer-gaps-size* 8)
;; (swm-gaps:toggle-gaps-off)

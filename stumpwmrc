;; -*-lisp-*-
;debian=sbcl
(in-package :stumpwm-user)

(require :asdf)

     ;;; If a fasl was stale, try to recompile and load (once).
(defmethod asdf:perform :around ((o asdf:load-op)
                                 (c asdf:cl-source-file))
  (handler-case (call-next-method o c)
    ;; If a fasl was stale, try to recompile and load (once).
    (sb-ext:invalid-fasl ()
      (asdf:perform (make-instance 'asdf:compile-op) c)
      (call-next-method))))

(ql:quickload '(:clx-truetype
                :ttf-fonts
                :split-sequence
                :bordeaux-threads
                :dbus
                "local-time"))

(set-font (make-instance 'xft:font :family "Source Code Pro Semibold" :subfamily "Regular" :size 12))

(ql:quickload :swank)

(let ((server-running nil))
  (defcommand swank () ()
    "Toggle the swank server on/off"
    (if server-running
        (progn
          (swank:stop-server 4005)
          (echo-string
           (current-screen)
           "Stopping swank.")
          (setf server-running nil))
        (progn
          (swank:create-server :port 4005
                               :style swank:*communication-style*
                               :dont-close t)
          (echo-string
           (current-screen)
           "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm).")
          (setf server-running t))))

  (defcommand quit-swank () ()
    (when server-running
      (swank:stop-server 4005)
      (setf server-running nil)))

  (add-hook *quit-hook* (lambda () (when server-running (swank:stop-server 4005))))
  (add-hook stumpwm::*restart-hook* (lambda () (when server-running (swank:stop-server 4005)))))

(handler-case (swank)
  (sb-bsd-sockets:address-in-use-error () (continue)))

(define-key *top-map* (kbd "s-w") "windows")
(define-key *top-map* (kbd "s-!") "exec")

(set-prefix-key (kbd "C-1"))

(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy

(defcommand chromium () ()
  "run chromium"
  (run-or-raise "chromium-browser" '(:instance "Chromium")))

(defcommand firefox () ()
  "run firefox"
  (if (string= (group-name (current-group)) "AIaaS")
      (run-or-raise "firefox -new-instance -P \"AIaaS\" --class \"Firefox-AIaaS\"" '(:class "Firefox-AIaaS"))
      (run-or-raise "firefox -new-instance -P \"Reset\" --class \"Firefox-Default\"" '(:class "Firefox-Default"))))

(define-key *top-map* (kbd "C-M-6") "firefox")

(defcommand conkeror () ()
  "run conkeror"
  (run-or-raise "conkeror" '(:class "Conkeror")))

(define-key *top-map* (kbd "C-M-8") "conkeror")

(defcommand virtualbox () ()
  "switch to VirtualBox"
  (run-or-raise "VirtualBox --startvm \"Windows\"" '(:class "VirtualBox")))

(define-key *top-map* (kbd "C-M-4") "virtualbox")

(defcommand pidgin-chat-window () ()
  "Raise pidgin-chat-window"
  (run-or-raise "pidgin" '(:class "Pidgin" :role "conversation")))

;; (define-key *top-map* (kbd "C-M-2") "pidgin-chat-window")

(defcommand pidgin () ()
  "Run pidgin"
  (run-or-raise "pidgin" '(:class "Pidgin" :role "buddy_list")))

(defcommand start-emacs () ()
  "start emacs dæmon"
  (run-shell-command "emacs --daemon"))

(defcommand stop-emacs () ()
  "stop emacs dæmon"
  (run-shell-command "emacsclient -e '(save-buffers-kill-emacs)'"))

(start-emacs)

(add-hook *quit-hook* #'stop-emacs)

;;(let ((sb-ext:run-program "/usr/bin/env" '("emacs" "--daemon"))))

(defcommand emacs () ()
  "run emacs"
  (if (string= (group-name (current-group)) "AIaaS")
      (run-or-raise "/usr/local/bin/emacsclient -c -F '((name . \"emacs-aiaas\"))' -a ''" '(:instance "emacs-aiaas"))
      (run-or-raise "/usr/local/bin/emacsclient -c -a ''" '(:instance "emacs"))))

(defcommand conkeror () ()
  "run conkeror"
  (run-or-raise "/usr/local/bin/conkeror" '(:class "Conkeror")))

;;(define-key *top-map* (kbd "C-M-8") "pidgin")

#|
;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t)) " | %t | %c| %l | [^B%n^b] %W"))

(define-key *top-map* (kbd "M-4") "emacs")
(define-key *top-map* (kbd "M-F9") "loadrc")
(define-key *top-map* (kbd "Pause") "gother")
(define-key *top-map* (kbd "C-Pause") "grouplist")

;; Some keybindings for the defined prefix key:
(define-key *root-map* (kbd "DEL") "repack-window-numbers")
(define-key *root-map* (kbd "I") "show-window-properties")

|#

(clear-window-placement-rules)
;; (gnew "Terminal")
;; (gnew "Development")
;; (gnew "Web")

;; (define-frame-preference "Terminal"
;;     (0 t t :class "Gnome-terminal"))

;; (define-frame-preference "Development"
;;     (1 t t :class "Emacs23")
;;     (0 t t :class "Eclipse"))

;; (define-frame-preference "Web"
;;     (0 t t :class "Chromium-browser"))

(defcommand urxvt () ()
  "Start an urxvt instance or switch to it, if it is already running."
  (run-or-raise "urxvt" '(:instance "urxvt")))
(define-key *root-map* (kbd "c") "urxvt")
(defcommand gnome-terminal () ()
  "Start an gnome-terminal instance or switch to it, if it is already running."
  (run-or-raise "gnome-terminal" '(:instance "gnome-terminal")))
(define-key *root-map* (kbd "c") "gnome-terminal")
(defcommand stterm () ()
  "Start an stterm or switch to it, if it is already running."
  (if (string= (group-name (current-group)) "AIaaS")
      (run-or-raise "st -c stterm-buhl -n \"AIaaS\" -e tmux new-session -A -s aiaas" '(:class "stterm-buhl" :instance "AIaaS"))
      (run-or-raise "st -c stterm-buhl -n \"Default\"  -e tmux new-session -A" '(:class "stterm-buhl" :instance "Default"))))

(define-key *root-map* (kbd "c") "stterm")

(defcommand suspend-dunst ()()
  "Suspend dunst notifications"
  (run-shell-command "killall -SIGUSR1 dunst"))

(defcommand resume-dunst ()()
  "Resume dunst notifications"
  (run-shell-command "killall -SIGUSR2 dunst"))

(defcommand lock-screen () ()
  (run-shell-command "xautolock -locknow"))

(defcommand unlock-screen () ()
  (run-shell-command "xautolock -unlocknow"))

(define-key *top-map* (kbd "s-l") "lock-screen")

(defvar *screen-map* (make-sparse-keymap))

(define-key *root-map* (kbd "/") '*screen-map*)

(defcommand home-display-layout () ()
  "Switch to my home display setup (portrait + laptop)"
  (run-shell-command "/home/buhl/.screenlayout/home.sh"))

(defcommand office-display-layout () ()
  "Switch to my office display setup (portrait + landscape)"
  (run-shell-command "/home/buhl/.screenlayout/office.sh"))

(defcommand standalone-display-layout () ()
  "Switch to laptop-only display"
  (run-shell-command "/home/buhl/.screenlayout/standalone.sh"))

(defcommand conference-room-display-layout () ()
  "Switch to conference-room display"
  (run-shell-command "/home/buhl/.screenlayout/conference-room.sh"))

(define-key *screen-map* (kbd "h") "home-display-layout")
(define-key *screen-map* (kbd "o") "office-display-layout")
(define-key *screen-map* (kbd "s") "standalone-display-layout")
(define-key *screen-map* (kbd "c") "conference-room-display-layout")

;;(run-shell-command "/home/buhl/bin/xflux -z 80203 -r 1")

(defvar %run-once% nil)

;; consider running dbus-launch and setting vars…

(unless %run-once%
  (run-shell-command "redshift -l 39.615186:-104.895381")
  (run-shell-command "exec xautolock -locker \"xset dpms 900 1200 1800 & (slock && xset -dpms) \" -corners 0-00 -time 5")
  ;; FIXME: can CLX handle this xset bit?
  ;;(run-shell-command "xset +dpms dpms 300 600 900")
  (run-shell-command "nm-applet --sm-disable")
  (run-shell-command "xbacklight -set 76")
  ;;(run-shell-command "xscreensaver")
  (setf %run-once% t))

(run-shell-command "synclient VertScrollDelta=-53")
(run-shell-command "feh --bg-tile ~/Pictures/geomatrix.png")

;; dbus-send --system --print-reply     --dest="org.freedesktop.UPower"     /org/freedesktop/UPower     org.freedesktop.UPower.Suspend

;; ;; the mode-line is kinda nice
;; (setf *screen-mode-line-format* "%d [^B%n^b] %W"
;;       *time-modeline-string* "%d %b %y %H:%M"
;;       *mode-line-timeout* 15)

;; ;; let's enable it everywhere
;; (defun enable-all-mode-lines ()
;;   (loop for screen in *screen-list*
;;         do (loop for head in (screen-heads screen)
;;                  do (enable-mode-line screen head t))))

;; (defun toggle-all-mode-lines ()
;;   (loop for screen in *screen-list*
;;         do (loop for head in (screen-heads screen)
;;                  do (toggle-mode-line screen head t))))

;; ;; (toggle-all-mode-lines)
;; (enable-all-mode-lines)

;; (defvar !old-group-sync-all-heads!
;;   (first (remove-if-not
;;           #'(lambda (x) (and (equalp (sb-mop:method-qualifiers x) '(:after))
;;                              (equalp (sb-mop:method-specializers x) (list (find-class 'group)))))
;;           (sb-mop:generic-function-methods #'group-sync-all-heads))))

;; update mode lines when the screen heads change

;; (defmethod group-sync-all-heads :after ((group group))
;;   (when !old-group-sync-all-heads!
;;     (funcall !old-group-sync-all-heads! group))
;;   (enable-all-mode-lines))

;; switch to other user: dbus-send --system --print-reply --dest=org.gnome.DisplayManager /org/gnome/DisplayManager/LocalDisplayFactory "org.gnome.DisplayManager.LocalDisplayFactory.CreateTransientDisplay"
